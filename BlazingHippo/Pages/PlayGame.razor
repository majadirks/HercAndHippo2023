@page "/playGame"
@using HercAndHippoLibCs
@using static ImageMapper
@inject IJSRuntime JsRuntime
@inject HttpClient Http

<style>
    body {
        background-color: black;
    }
</style>

<script>
    this.addEventListener("keydown", e => DotNet.invokeMethodAsync('BlazingHippo', 'OnKeyDown', String(e.keyCode)))
    this.addEventListener("keyup", () => DotNet.invokeMethodAsync('BlazingHippo', 'OnKeyUp'))
</script>

<PageTitle>Herc and Hippo</PageTitle>

<h1 style="color:white" >Herc and Hippo</h1>

@if (state == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div style="position: relative">
        <h3 style="color:white">@status</h3>
    @foreach (HercAndHippoObj hho in state.GetDisplayables())
    {
        @hho.GetHtml()
    }
    </div>

}

@code {

    private readonly DisplayLoop mainLoop;
    private Level state;
    private ElementReference controlInput;
    private static string status = "Use WASD to move, shift to shoot, q to quit.";
    private static int lastKey = WasdController.NO_ACTION_KEY;
    private readonly GameController controller;
    private const int QUIT_KEY_CODE = 81; // "q"

    public PlayGame()
    {
        controller = new WasdController(() => lastKey);
        state = HercAndHippoLibCs.DemoLevels.IntroducingTheHippo;
        mainLoop = new DisplayLoop(controller: controller, state: state, frequency_hz: 35, display: this); 
    }

    public async Task Update(DisplayPlan displayPlan, ActionInputPair aip)
    {
        // ToDo: deal with scrolling etc.
        state = displayPlan.State;
        if (state.WinState == WinState.Won)
        {
            status = "You win!";
            mainLoop.Stop();
        }
        else if (state.WinState == WinState.Lost)
        {
            status = "You lose!";
            mainLoop.Stop();
        }
        else if (aip.Equals(ActionInput.Quit))
        {
            // Not working yet...
            status = "Quit";
            mainLoop.Stop();
        }
        else
        {
            status = lastKey.ToString();
        }
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public static void OnKeyDown(string keyCode)
    {
        lastKey = Convert.ToInt32(keyCode);
    }

    [JSInvokable]
    public static void OnKeyUp()
    {
        lastKey = WasdController.NO_ACTION_KEY;
    }

}
