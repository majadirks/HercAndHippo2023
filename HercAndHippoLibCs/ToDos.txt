-= Desired features =-

- ML learning: use Python to train a model to beat a level, using reinforcement learning .
	* https://stackoverflow.com/questions/34266589/use-net-dll-in-python
	* https://pypi.org/project/pythonnet/
	* IronPython
- Level editor
- Implement and test "seek" behavior for bullet
- Consider changing Level back to a record, and re-introducing multiple-replacement

Tests to write:
	- Groodle tests:
		- Groodle removes health from hippo if groodle touches hippo
			- Check case when Groodle approaches from West and Hippo is blocked East
		- Groodle removes health from hippo if hippo touches groodle
		- Groodle removes health from player if groodle touches player
		- Groodle removes health from player if player touches groodle
		- Groodle dies when shot (test bullet/groodle moving into same location, nearby...)
		- Groodle is subject to gravity
		- Groodle dies if it falls into abyss
		- Groodle passes over ammo without interacting with it; ammo remains on level
	- Gem tests:
		- Gives health to player and removes self from level when touched
		- Does not block player movement
		- Does not block hippo movement (player can jump into gem while wearing hippo)
		- Does not block bullets (they should just pass over)
	- Test ManhattanDistance()
	- Test that Driver moves player after cycle
	- Test that, when falling due to gravity,
	     if player stops at motion-blocking object,
		 its OnTouch() method is called once
    - In level with gravity, if player is blocked South, can MoveSouth to touch that object
	- Hippo:
	   - Test hippo falling to end of level: dies unless locked to player.
	   - Test: if hippo is locked to player and reaches bottom of level, remains locked to player after toroidal wrap-around
	   - Blocks Groodle regardless of relative position of player
	   - When touched by non-player, does not lock to player
	- Player wraps around level toroidally if reaches bottom
	- Console (in new project): does not crash on resize (larger or smaller)
	- Test Behavior MutualTouch

- Update DeepSeek to work with any ILocatable, not just Player. Test. Use Dijkstra's Algorithm.
- Transporters
- Torches and darkness
- Boulders and pushables
- Enemies: archers
- Lives
- Scrolls
- Custom programmable objects (support a superset of ZZT-OOP)
- Objects can send each other messages and react accordingly.
- Music / sound effects
- Saved games
- Cheat codes
- Converter to convert ZZT worlds (including ZZT-OOP) to Herc and Hippo worlds???
- Look into Unity or MAUI for creating non-ASCII interface and mobile version

  -=Unit Test=-
  If player moves for a while in a direction, player never hinders its own motion